#+TITLE: My macOS dotfiles
#+AUTHOR: Ogi Martinovic
#+OPTIONS: num:nil

#+TOC:

* Emacs

Tested on Emacs 29.0.60, macOS emacs-plus distribution.

** Install Emacs

*** Homebrew

**** [[https://github.com/d12frosted/homebrew-emacs-plus][emacs-plus]]

#+begin_src shell :tangle no :eval no
  brew tap d12frosted/emacs-plus
  brew install emacs-plus@29 --with-native-comp --with-poll --with-xwidgets --with-elrumo2-icon
#+end_src

** Early Init File
:properties:
:header-args: :tangle ~/.dotfiles/emacs/.config/emacs/early-init.el :eval no
:end:

**** Preamble

#+begin_src emacs-lisp
  ;;;; early-init.el
  ;;;;
  ;;;; This is a generated file from ~/.dotfiles/emacs.org
  ;;;; Do not edit!
#+end_src

**** Native Compilation

For Emacs with native compilation (version >= 28.1):

#+begin_src emacs-lisp
  (setq native-comp-speed 2
        native-comp-jit t
        native-comp-async-report-warnings-errors nil)
#+end_src

**** Emacs Frame Settings

#+begin_src emacs-lisp
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message ";; Emacs Lisp\n\n")
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (delete-selection-mode 1)
  (setq blink-cursor-mode nil)
  (setq line-number-mode t)
  (setq column-number-mode t)
  (if (not (display-graphic-p))
      (menu-bar-mode 0))
  (setq default-frame-alist '((width . 128) (height . 42)))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon nil
	ns-antialias t
	ns-use-thin-smoothing nil)
  (pixel-scroll-precision-mode)
  (setq x-underline-at-descent-line t)
#+end_src

**** Visible Bell

#+begin_src emacs-lisp
  (setq visible-bell nil
	ring-bell-function 'flash-mode-line)

  (defun flash-mode-line ()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src

**** Fixed and Variable Pitch Fonts

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :family "Source Code Pro" :height 140 :weight 'normal)
  (set-face-attribute 'variable-pitch nil :family "Source Sans 3" :height 1.1)
  (set-face-attribute 'fixed-pitch nil :family (face-attribute 'default :family))
  (set-face-attribute 'bold nil :weight 'medium)
#+end_src

** Init File
:properties:
:header-args: :tangle ~/.dotfiles/emacs/.config/emacs/init.el :eval no
:end:

**** Preamble

#+begin_src emacs-lisp
  ;;;; init.el
  ;;;;
  ;;;; This is a generated file from ~/.dotfiles/emacs.org
  ;;;; Do not edit!
#+end_src

*** Garbage Collection

**** Threshold

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 4 1024 1024))
#+end_src

*** Package Manager

[[https://github.com/jwiegley/use-package]]

**** Initialize package manager

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
  (setq package-native-compile t)
#+end_src

**** Config use-package

#+begin_src emacs-lisp
  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (setq use-package-expand-minimally t)
#+end_src

*** Files and Backup

**** Autorevert

Automatically reload files modified by external programs.

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

**** Backup

#+begin_src emacs-lisp
  (setq user-emacs-diructory "~/.cache/emacs/")
  (setq make-backup-files t)
  (setq backup-directory-alist '(("." . "~/.cache/emacs/backups/")))
#+end_src

**** Read File

#+begin_src emacs-lisp
  (defun read-lines (file-name)
    (if (file-exists-p file-name)
	(with-temp-buffer
	  (insert-file-contents file-name)
	  (split-string (buffer-string) "\n" t))
      nil))
#+end_src

*** Meta Keys

**** Apple Keyboard

Use Option & Command as Meta

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'meta))
#+end_src

*** Theme

**** Title Bar

#+begin_src emacs-lisp
  (use-package ns-auto-titlebar
    :defer t
    :init
    (ns-auto-titlebar-mode))
#+end_src

**** Font Utils

Make bold wieght semi-bold.

#+begin_src emacs-lisp
  (defun font-weight ()
    "Normal weight font"
    (interactive)
    (set-face-attribute 'default nil :weight 'normal)
    (set-face-attribute 'bold nil :weight 'medium))
#+end_src

#+begin_src emacs-lisp
  (defun font-size (size)
    (interactive "nFont size in pt: ")
    (let ((height (* size 10)))
	(set-face-attribute 'default nil :height height)
	(set-face-attribute 'bold nil :height height)))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'after-init-hook (lambda () (font-weight)))
  (add-hook 'org-mode-hook (lambda () (font-weight)))
#+end_src

**** Modus Themes

#+begin_src emacs-lisp
  (use-package modus-themes
    :bind ("<f5>" . modus-themes-toggle)
    :init
    (require 'modus-themes)
    (add-hook 'modus-themes-after-load-theme-hook
	      (lambda ()
		(if (string= (modus-themes--current-theme) "modus-operandi")
		    (setenv "EMACS_THEME" "light")
		  (setenv "EMACS_THEME" "dark"))
		(font-weight)
		(set-face-attribute 'line-number-current-line nil
				    :slant 'normal :bold nil)
		(set-face-attribute 'line-number nil
				    :slant 'normal :bold nil)))
    (setq modus-themes-to-toggle '(modus-vivendi modus-operandi))
    (setq modus-themes-weights '(normal semibold)
	  modus-themes-disable-other-themes t)
    (setq modus-themes-common-palette-overrides
	  '((fg-region unspecified)
	    (bg-region bg-mode-line-inactive)
	    (bg-line-number-active bg-default)
	    (bg-line-number-inactive bg-default)
	    (fg-line-number-active bg-active)
	    (fg-line-number-inactive bg-inactive)
	    (bg-paren-match bg-mode-line-active)
	    (fringe bg-default)))
    (setq modus-operandi-palette-overrides
	  `((cursor "black")
	    (bg-paren-match bg-mode-line-inactive)
	    (bg-mode-line-active bg-blue-subtle)
	    ,@modus-themes-common-palette-overrides))
    (setq modus-vivendi-palette-overrides
	  `((cursor "white")
	    (bg-paren-match bg-mode-line-active)
	    ,@modus-themes-common-palette-overrides))
    :config
    (modus-themes-load-theme (car modus-themes-to-toggle)))
#+end_src

*** Modeline

**** Diminish

#+begin_src emacs-lisp
  (use-package diminish
    :init
    (diminish 'eldoc-mode))
#+end_src

*** Minibuffer

**** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))
#+end_src

**** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic partial-completion)))
#+end_src

**** Consult

#+begin_src emacs-lisp
  (use-package consult
    :bind (("C-x C-b" . consult-buffer)
	   ("C-c l"   . consult-line)
	   ("C-c r"   . consult-ripgrep)))
#+end_src

**** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :defer t
    :init (marginalia-mode))
#+end_src

*** Completion and LSP

**** Company Completion

#+begin_src emacs-lisp
  ;; (use-package company
  ;;   :defer 3
  ;;   :config
  ;;   (global-company-mode))
#+end_src

**** Corfu Completion

#+begin_src emacs-lisp
  (use-package corfu
    :init
    (require 'corfu-popupinfo)
    (global-corfu-mode)
    (corfu-popupinfo-mode)
    :custom
    (corfu-auto t))
#+end_src

**** EGlot LSP

#+begin_src emacs-lisp
  (use-package eglot
    :ensure nil
    :defer t)
#+end_src

Start eglot automatically

#+begin_src emacs-lisp :tangle no :eval no
  (add-hook 'XXX-mode-hook 'eglot-ensure)
#+end_src

*** Language Modes

**** Common Lisp

Steel Bank Common Lisp:

#+begin_src shell :tangle no :eval no
  brew install sbcl
  curl -O https://beta.quicklisp.org/quicklisp.lisp
  sbcl --load quicklisp.lisp
#+END_SRC

Sly package:

#+begin_src emacs-lisp
  (use-package sly
    :defer t
    :commands (sly)
    :config
    (setq inferior-lisp-program "sbcl"))
#+end_src

Docs:
- [[https://www.sbcl.org/manual]]
- [[https://www.quicklisp.org/beta/]]
- [[https://github.com/joaotavora/sly]]


**** Scheme / Racket

Racket

#+begin_src shell :tangle no :eval no
  brew install minimal-racket
  raco pkg install --auto drracket
#+END_SRC

#+begin_src emacs-lisp
  (use-package racket-mode
    :defer t)
#+end_src

**** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode
    :defer t)
#+end_src

#+begin_src emacs-lisp
  (use-package cider
    :defer t
    :init
    (setq safe-local-variable-values '((cider-clojure-cli-aliases . "dev")
				       (cider-clojure-cli-command . "clojure")))
    :config
    (setq cider-repl-use-clojure-font-lock t)
    ;; (setq nrepl-hide-special-buffers t)
    ;; (setq cider-overlays-use-font-lock t)
    (setq cider-use-overlays nil)
    ;; (setq cider-show-error-buffer nil)
    (setq cider-eldoc-display-for-symbol-at-point t))
#+end_src

**** Prolog

SWI Prolog:

#+begin_src sh :tangle no :eval no
  brew install swi-prolog
#+END_SRC

Built-in prolog-mode:

#+begin_src emacs-lisp
  (use-package prolog-mode
    :ensure nil
    :defer t
    :mode ("\\.pl?\\'" . prolog-mode))
#+end_src

Docs:

[[https://www.swi-prolog.org/pldoc/refman/]]

**** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :defer t
    :config
    (setq rust-format-on-save t))
#+end_src

**** Go

#+begin_src emacs-lisp
  (use-package go-mode
    :defer t
    :config
    (defun project-find-go-module (dir)
      (when-let ((root (locate-dominating-file dir "go.mod")))
	(cons 'go-module root)))

    (cl-defmethod project-root ((project (head go-module)))
      (cdr project))

    (add-hook 'project-find-functions #'project-find-go-module)
    (add-hook 'go-mode-hook (lambda () (setq-local compile-command "go build ")))
    (add-hook 'go-mode-hook (lambda () (setq tab-width 4))))
#+end_src

#+begin_src emacs-lisp
  (use-package go-tag
    :defer t
    :after go-mode)
#+end_src

**** C

#+begin_src emacs-lisp
  (use-package c-mode
    :ensure nil
    :defer t
    :init (setq c-basic-offset 4)
    :config
    (add-hook 'c-mode-hook
	      (lambda ()
		(setq comment-start "//" comment-end ""))))
#+end_src

**** Python

#+begin_src emacs-lisp
  (use-package python
    :ensure nil
    :defer t
    :hook (python-mode-hook . eldoc-mode))
#+end_src

*** Git

**** Magit

#+begin_src emacs-lisp
  (use-package magit
    :defer t)
#+end_src

*** Prog Modes

# todo: https://github.com/casouri/tree-sitter-module

**** Line Numbers

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

**** Smart Parens

#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (global-set-key (kbd "M-o (") 'sp-wrap-round)
    (global-set-key (kbd "M-o [") 'sp-wrap-square)
    (global-set-key (kbd "M-o {") 'sp-wrap-curly)
    (global-set-key (kbd "M-o r") 'sp-rewrap-sexp)
    (global-set-key (kbd "M-o w") 'sp-unwrap-sexp)
    (global-set-key (kbd "M-o f") 'sp-forward-sexp)
    (global-set-key (kbd "M-o b") 'sp-backward-sexp)
    (global-set-key (kbd "M-o u") 'sp-up-sexp)
    (global-set-key (kbd "M-o d") 'sp-down-sexp))
#+end_src

**** Dockerfile

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :defer t
    :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src

**** ProtoBuf

#+begin_src emacs-lisp
  (use-package protobuf-mode
    :defer t
    :defer t)
#+end_src

**** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :defer t
    :mode ("\\.yml\\'" . yaml-mode))
#+end_src

**** HashiCorp HCL

#+begin_src emacs-lisp
  (use-package hcl-mode
    :defer t)
#+end_src

**** Web HTML/JS

#+begin_src emacs-lisp
  (use-package web-mode
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+end_src

**** Rest Client

#+begin_src emacs-lisp
  (use-package restclient
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.restclient\\'" . restclient-mode)))
#+end_src

**** DotEnv

Todo

#+begin_src emacs-lisp
  ;; (use-package dotenv
  ;;   :quelpa
  ;;   (dotenv :repo "pkulev/dotenv.el"
  ;;           :fetcher github :upgrade t))
#+end_src

**** Shell

#+begin_src emacs-lisp
  (add-hook 'sh-mode-hook
	(lambda ()
	  (setq sh-basic-offset 2
		sh-indentation 2)))
#+end_src

**** Snippets

#+begin_src emacs-lisp
  (use-package yasnippet
    :defer t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook #'yas-minor-mode))
#+end_src

*** Eshell

**** Git

#+begin_src emacs-lisp
  (defun eshell/gst (&rest args)
      (magit-status (pop args) nil)
      (eshell/echo))
#+end_src

#+begin_src emacs-lisp
  (defun git-prompt-branch-name ()
    (let ((args '("symbolic-ref" "HEAD" "--short")))
      (with-temp-buffer
	(apply #'process-file "git" nil (list t nil) nil args)
	(unless (bobp)
	  (goto-char (point-min))
	  (buffer-substring-no-properties (point) (line-end-position))))))
#+end_src

**** Prompt

#+begin_src emacs-lisp
  (defun pwd-replace-home (pwd)
    "Replace home in PWD with tilde (~) character."
    (interactive)
    (let* ((home (expand-file-name (getenv "HOME")))
	   (home-len (length home)))
      (if (and
	   (>= (length pwd) home-len)
	   (equal home (substring pwd 0 home-len)))
	  (concat "~" (substring pwd home-len))
	pwd)))
#+end_src

#+begin_src emacs-lisp
  (defun pwd-shorten-dirs (pwd)
    "Shorten all directory names in PWD except the last two."
    (let ((p-lst (split-string pwd "/")))
      (if (> (length p-lst) 3)
	  (concat "~/.../"
		  (mapconcat (lambda (elm) elm)
			     (last p-lst 2)
			     "/"))
	pwd)))
#+end_src

#+begin_src emacs-lisp
  (defmacro with-face (str &rest properties)
    `(propertize ,str 'face (list ,@properties)))

  (defun esh-prompt-fn ()
    (let ((branch-name (git-prompt-branch-name))
	  (prompt-path (pwd-shorten-dirs (pwd-replace-home (eshell/pwd))))
	  (default-fg (face-attribute 'default :foreground))
	  (branch-fg (face-attribute 'modus-themes-fg-cyan :foreground))
	  (path-fg (face-attribute 'modus-themes-fg-blue :foreground)))
      (concat (with-face "[" :foreground default-fg)
	      (with-face prompt-path :foreground path-fg)
	      (if branch-name
		  (with-face (concat " " branch-name) :foreground branch-fg)
		"")
	      (with-face "] $" :foreground default-fg)
	      (with-face " " :foreground default-fg))))
#+end_src

**** Eshell Mode

#+begin_src emacs-lisp
  (use-package eshell
    :ensure nil
    :defer t
    :bind (("C-c e" . eshell)
	   ("C-c C-r" . consult-eshell-history))
    :init
    (setq eshell-hist-ignoredups t
	  eshell-save-history-on-exit t
	  eshell-destroy-buffer-when-process-dies t)
    (add-hook 'eshell-mode-hook
	      (lambda ()
		;; aliases
		(eshell/alias "ff" "find-file $1")
		(eshell/alias "ee" "find-file-other-window $1")
		(eshell/alias "gd" "magit-diff-unstaged")
		(eshell/alias "gds" "magit-diff-staged")
		(eshell/alias "bat" "bat --theme=base16")
		(eshell/alias "ll" "exa -al --git --sort=type --time-style=long-iso")
		(eshell/alias "tree" "exa -a --tree --sort=type --ignore-glob='.git|.idea|.vscode'")
		;; visaul commands
		(add-to-list 'eshell-visual-commands "bat")
		(add-to-list 'eshell-visual-commands "ssh")
		(add-to-list 'eshell-visual-commands "tail")))
    :config
    (setq eshell-prompt-function #'esh-prompt-fn))
#+end_src

**** History

#+begin_src emacs-lisp
  (defun eshell-history-list ()
    "return the eshell history as a list"
    (and (or (not (ring-p eshell-history-ring))
	     (ring-empty-p eshell-history-ring))
	 (error "No history"))
    (let* ((index (1- (ring-length eshell-history-ring)))
	   (ref (- (ring-length eshell-history-ring) index))
	   (items (list)))
      (while (>= index 0)
	(setq items (cons (format "%s" (eshell-get-history index)) items)
	      index (1- index)
	      ref (1+ ref)))
      items))
#+end_src

#+begin_src emacs-lisp
  (defun consult-eshell-history ()
    "Eshell History"
    (interactive)
    "Insert eshell command from history"
    (let ((cmd (completing-read "Select eshell command: "
				(eshell-history-list))))
      (insert cmd)))
#+end_src

#+begin_src emacs-lisp
(use-package esh-mode
  :ensure nil
  :defer t
  :bind (:map eshell-mode-map
	      ("C-c C-r" . consult-eshell-history)))
#+end_src

*** Terminal

**** VTerm

[[https://github.com/akermu/emacs-libvterm]]

#+begin_src emacs-lisp
  (use-package vterm
    :defer t
    :init
    (setq vterm-shell "/bin/zsh")
    (setq vterm-term-environment-variable "eterm-color")
    (setq vterm-disable-bold t))
#+end_src

**** Multi VTerm

#+begin_src emacs-lisp
  (use-package multi-vterm
    :defer t
    :bind ("C-c t" . multi-vterm))
#+end_src

*** SQL

**** PostgreSQL

#+begin_src emacs-lisp
  (use-package sql-mode
    :ensure nil
    :defer t
    :bind ("C-c q" . sql-connect)
    :init
    (defun psql:connection-alist (pgpass)
      (let ((value))
	(dolist (element pgpass value)
	  (setq srv-element (split-string element ":"))
	  (setq value (cons (list (intern (nth 0 srv-element))
				  `(sql-server ,(nth 0 srv-element))
				  `(sql-port ,(string-to-number
					       (nth 1 srv-element)))
				  `(sql-database ,(nth 2 srv-element))
				  `(sql-user ,(nth 3 srv-element))
				  `(sql-password ,(nth 4 srv-element)))
			    value)))))
    (setq sql-product 'postgres)
    (setq sql-connection-alist
	  (reverse (psql:connection-alist (read-lines "~/.pgpass"))))
    (add-hook 'sql-interactive-mode-hook
	      (lambda ()
		(toggle-truncate-lines t)
		(sql-highlight-postgres-keywords))))
#+end_src

*** Documents

**** Prerequisites

#+begin_src shell :tangle no :eval no
  brew install pandoc
  brew install graphviz
  brew install grip
  brew install aspell
  brew install basictex
#+end_src

Make sure //Library/TeX/texbin/ is in the /PATH/.

#+begin_src bash :tangle no :eval no
  sudo tmlmgr update --self
  sudo tlmgr install capt-of
  sudo tlmgr install wrapfig
#+end_src

**** Browser

#+begin_src emacs-lisp
  (setq browse-url-browser-function 'xwidget-webkit-browse-url)
#+end_src

***** Search Google

#+begin_src emacs-lisp
  (defun google ()
    (interactive)
    (xwidget-webkit-browse-url "https://google.com"))
#+end_src

***** Search DuckDuckGo

#+begin_src emacs-lisp
  (defun duckduckgo ()
    (interactive)
    (xwidget-webkit-browse-url "https://duckduckgo.com"))
#+end_src

**** Render Markdown and Org Mode

#+begin_src emacs-lisp
  (use-package grip-mode
    :defer t
    :custom (grip-preview-use-webkit t))
#+end_src

#+begin_src shell :tangle no
  touch ~/.authinfo
  chmod 600 ~/.authinfo
#+end_src

#+begin_src shell :tangle no
  host api.github.com user ogimart password <github-api-token>
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package grip-mode
    :defer t
    :init
    (require 'auth-source)
    (let ((credentials (auth-source-user-and-password "api.github.com")))
      (setq grip-github-user (car credentials)
	    grip-github-password (cadr credentials)))
    :custom
    (grip-preview-use-webkit t))
#+end_src

**** Exported code blocks syntax highlighting

#+begin_src emacs-lisp
  (use-package htmlize
    :defer t)
#+end_src

**** Spell Check

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :defer t
    :custom
    (ispell-program-name "aspell")
    (aspell-dictionary "en_US-wo_accents")
    (aspell-program-name "/opt/homebrew/bin/aspell")
    (ispell-dictionary "en_US-wo_accents")
    (ispell-program-name "/opt/homebrew/bin/aspell")
    :config
    ;; (define-key flyspell-mode-map [down-mouse-3] 'flyspell-correct-word)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'markdown-mode)
    (add-hook 'TeX-mode-hook 'flyspell-mode))
#+end_src

**** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :defer t
    :commands (mardown-mode gfm-mode)
    :mode (("\\.md\\'" . gfm-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init
    (setq markdown-command "pandoc"))
#+end_src

**** GraphViz

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
    ;; :init
    ;; (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot)))
#+end_src

# todo: https://plantuml.com/emacs

**** Org Mode

# TODO
# (setq org-superstar-headline-bullets-list '("⁖" "◉" "○" "✸" "✿"))
# https://github.com/ofosos/ox-epub

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :defer t
    :config
    ;; export
    (require 'ox-md nil t)
    (require 'ox-gfm nil t)
    ;; theme
    ;; (if (eq current-theme 'light)
    ;;	(org-light-theme)
    ;; (org-dark-theme))
    (setq org-hide-emphasis-markers nil)
    (setq org-src-fontify-natively t))

  (use-package ox-gfm
    :after org)
#+end_src

*** Key Bindings and Utils

**** Utils

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :init
    (which-key-mode))
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-c w") 'delete-trailing-whitespace)

  (setq scroll-preserve-screen-position 1)
  (global-set-key (kbd "M-n") (kbd "C-u 1 C-v"))
  (global-set-key (kbd "M-p") (kbd "C-u 1 M-v"))
#+end_src

**** Helper Functions

***  Vim Emulator

**** evil

#+begin_src emacs-lisp
  (use-package evil
    :defer 3
    :config
    (setq evil-default-state 'emacs)
    (setq evil-disable-insert-state-bindings t)
    (evil-set-initial-state 'vterm-mode 'emacs)
    (evil-set-initial-state 'shell-mode 'emacs)
    (evil-set-initial-state 'eshell-mode 'emacs)
    (evil-mode 0))
#+end_src

*** Custom Set Variables

**** Emacs generated

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file 'noerror)
#+end_src
